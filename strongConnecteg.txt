test1 visited
    edge of test1 (test2) gets visted
        edge of test2 (test3) gets visited
            edge of test3 (test1) gets visited
                should return
            edge of test3 (test4) gets visited
                edge of test4 (test5) gets visited
                    edge of test5 (test4) gets visited
                        should return
                    edge of test5 (test6) gets visted
                        edge of test6 (test7) gets visited
                            edge of test7 (test8) gets visited
                                edge of test8 (test9) gets visited
                                    edge of test9 (test10) gets visited
                                        edge of test10 (test6) gets visited
                                            should return
                                            add test10 to L      
                                        should return
                                        add test9 to L
                                    should return
                                    add test8 to L
                                should return
                                add test7 to L
                            should return
                            add test6 to L
                        should return
                        add test5 to L
                should return
                add test 4 to L
            should return
            add test3 to L
    should return
    add test2 to L
should return 
add test1 to L


all vertexs now have been visited

L should now look like
{
    test10
    test9
    test8
    test7
    test6
    test5
    test4
    test3
    test2
    test1
}

assign test10 to 0
    assign test6 to 0
        assign test7 to 0
            assign test8 to 0
                assign test 9 to 0
                    assign test10 to 0 already assigned should return
numOfComp = 1;
assign test9 to 1 already assigned should return
numOfComp = 2;
assign test8 to 2 already assigned should return
numOfComp = 3;
assign test7 to 3 already assigned should return
numOfComp = 4;
assign test6 to 4 already assigned should return
numOfComp = 5;
assign test5 to 5
    assign test4 to 5
        assign test4 to 5 already assigned should return

numOfComp = 6;
assign test4 to 6 already assigned should return
numOfComp = 7;
assign test3 to 7
    assign test2 to 7
        assign test1 to 7
            assign test3 to 7 already assigned should return


1:
    test10, test9, test8, test7, test6

5: 
    test5, test4

7:
    test3, test2, test1

this is correct solution for getStronglyConnectedParts(testData2)